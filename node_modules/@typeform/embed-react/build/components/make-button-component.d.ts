import React, { CSSProperties, ReactNode, ReactHTML, HTMLAttributes } from 'react';
declare type ButtonComponentBaseProps = {
    id: string;
    as?: keyof ReactHTML;
    buttonProps?: HTMLAttributes<HTMLElement> & Record<string, string>;
    style?: CSSProperties;
    className?: string;
    children: ReactNode;
};
declare type ButtonComponentProps<T> = T & ButtonComponentBaseProps;
declare type CreateFnProps<T> = Omit<ButtonComponentProps<T>, keyof ButtonComponentBaseProps>;
declare type CreateFn<T> = (id: string, props: CreateFnProps<T>) => GenericEmbed;
export declare type GenericEmbed = {
    unmount: () => void;
    open: () => void;
};
export declare const emptyEmbed: GenericEmbed;
declare function makeButtonComponent<T>(createFn: CreateFn<T>, cssFilename: string): React.ForwardRefExoticComponent<React.PropsWithoutRef<T & ButtonComponentBaseProps> & React.RefAttributes<unknown>>;
export { makeButtonComponent };
//# sourceMappingURL=make-button-component.d.ts.map