declare const Widget: import("react").MemoExoticComponent<import("react").FC<Omit<import("@typeform/embed").WidgetOptions, "container"> & {
    id: string;
    style?: import("react").CSSProperties | undefined;
    className?: string | undefined;
}>>;
declare const PopupButton: import("react").MemoExoticComponent<import("react").FC<import("../../embed/types/base").BaseOptions & import("../../embed/types/base").ModalWindowOptions & import("../../embed/types/base").UrlOptions & import("../../embed/types/base").ActionableOptions & import("../../embed/types/base").BehavioralOptions & import("../../embed/types/base").WidthOption & {
    height?: number | undefined;
    autoResize?: string | boolean | undefined;
    fullScreen?: boolean | undefined;
} & import("../../embed/types/base").IframeOptions & {
    size?: number | undefined;
} & {
    id: string;
    as?: keyof import("react").ReactHTML | undefined;
    buttonProps?: (import("react").HTMLAttributes<HTMLElement> & Record<string, string>) | undefined;
    style?: import("react").CSSProperties | undefined;
    className?: string | undefined;
    children: import("react").ReactNode;
} & import("react").RefAttributes<unknown>>>;
declare const SliderButton: import("react").MemoExoticComponent<import("react").FC<import("../../embed/types/base").BaseOptions & import("../../embed/types/base").ModalWindowOptions & import("../../embed/types/base").UrlOptions & import("../../embed/types/base").ActionableOptions & import("../../embed/types/base").BehavioralOptions & import("../../embed/types/base").WidthOption & import("../../embed/types/base").IframeOptions & {
    position?: "right" | "left" | undefined;
} & {
    id: string;
    as?: keyof import("react").ReactHTML | undefined;
    buttonProps?: (import("react").HTMLAttributes<HTMLElement> & Record<string, string>) | undefined;
    style?: import("react").CSSProperties | undefined;
    className?: string | undefined;
    children: import("react").ReactNode;
} & import("react").RefAttributes<unknown>>>;
declare const Popover: import("react").MemoExoticComponent<import("react").FC<import("../../embed/types/base").BaseOptions & import("../../embed/types/base").ModalWindowOptions & import("../../embed/types/base").UrlOptions & import("../../embed/types/base").ActionableOptions & import("../../embed/types/base").BehavioralOptions & import("../../embed/types/base").WidthOption & {
    height?: number | undefined;
    autoResize?: string | boolean | undefined;
    fullScreen?: boolean | undefined;
} & import("../../embed/types/base").IframeOptions & {
    size?: number | undefined;
    buttonColor?: string | undefined;
    customIcon?: string | undefined;
    tooltip?: string | undefined;
    notificationDays?: number | undefined;
} & {
    id: string;
} & import("react").RefAttributes<unknown>>>;
declare const Sidetab: import("react").MemoExoticComponent<import("react").FC<import("../../embed/types/base").BaseOptions & import("../../embed/types/base").ModalWindowOptions & import("../../embed/types/base").UrlOptions & import("../../embed/types/base").ActionableOptions & import("../../embed/types/base").BehavioralOptions & import("../../embed/types/base").WidthOption & {
    height?: number | undefined;
    autoResize?: string | boolean | undefined;
    fullScreen?: boolean | undefined;
} & import("../../embed/types/base").IframeOptions & {
    buttonText?: string | undefined;
    buttonColor?: string | undefined;
    customIcon?: string | undefined;
} & {
    id: string;
} & import("react").RefAttributes<unknown>>>;
export { Widget, PopupButton, SliderButton, Popover, Sidetab };
//# sourceMappingURL=index.d.ts.map